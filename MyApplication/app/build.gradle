apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        // 不声明ndk标签,项目默认会创建一个libapp.so的文件
        ndk {
            // 声明创建so库的文件名,会自动添加lib前缀, 添加了前缀,不会自动添加
            moduleName "testjni"

            //声明启用Android日志, 在c/c++的源文件中使用的#include <android/log.h> 日志将得到输出
            //这里我们关联了两个库 一个是liblog 和 libz
            ldLibs "log", "z"

            // 声明创建指定cpu架构的so库, 不声明的话, 默认(gradle 1.5.0)会生成7中架构,如果你的libcurl没有提供别的平台，那么就会链接失败，
            //所以此条配置很重要，这里我们只生成一个平台
            abiFilters  "arm64-v8a"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs {
                //将生成的so放到这个目录下
                srcDirs = ['../libs']
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            //表示构件androidJNI的Android.mk的所在路径
            path '../JNI/Android.mk'
        }
    }

//    packagingOptions {
//        exclude 'lib/arm64-v8a/libtestjni.so'
//        exclude 'lib/x86_64/libtestjni.so'
//        exclude 'lib/armeabi-v7a/libtestjni.so'
//        exclude 'lib/x86/libtestjni.so'
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
